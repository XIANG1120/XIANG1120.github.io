<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XIANG的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-08-20T13:46:09.649Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>XIANG</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gperftools的安装与使用</title>
    <link href="http://example.com/2023/08/19/gperftools%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2023/08/19/gperftools%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2023-08-19T11:37:02.000Z</published>
    <updated>2023-08-20T13:46:09.649Z</updated>
    
    <content type="html"><![CDATA[<p>gperftools是Google开源的一款包含多线程下高性能内存分配器<code>tcmalloc</code>和其他性能分析工具的集合。共分为四个部分，TCmalloc：一个优化的内存管理算法；Heap_Check：检测程序运行过程中是否发生内存泄漏的工具；Heap_Profile：监控程序运行过程中的内存分配情况的工具；Cpu_Profile：监控程序运行过程中的cpu消耗时间的工具；部分工具以<a href="https://xiang1120.github.io/2023/08/19/TreeLine%E7%9A%84%E7%BC%96%E8%AF%91%E5%8F%8A%E8%BF%90%E8%A1%8C/">treeline</a>为例介绍其使用方法；</p><h2 id="安装gperftools"><a href="#安装gperftools" class="headerlink" title="安装gperftools"></a>安装gperftools</h2><h3 id="安装所需工具"><a href="#安装所需工具" class="headerlink" title="安装所需工具"></a>安装所需工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt autoconf automake libtool</span><br></pre></td></tr></table></figure><h3 id="安装libunwind"><a href="#安装libunwind" class="headerlink" title="安装libunwind"></a>安装libunwind</h3><p>下载源码并解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.savannah.gnu.org/releases/libunwind/libunwind-1.6.0.tar.gz</span><br><span class="line">tar -zxvf libunwind-1.6.0.tar.gz</span><br></pre></td></tr></table></figure><p>编译并安装，默认安装在/usr/local目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> libunwind-1.6.0</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h3 id="安装图形可视化工具gv"><a href="#安装图形可视化工具gv" class="headerlink" title="安装图形可视化工具gv"></a>安装图形可视化工具gv</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install graphviz gv</span><br></pre></td></tr></table></figure><h3 id="安装gperftools-1"><a href="#安装gperftools-1" class="headerlink" title="安装gperftools"></a>安装gperftools</h3><p>下载源码并解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://sourceforge.net/projects/gperftools.mirror/files/gperftools-2.10/gperftools-2.10.tar.gz</span><br><span class="line">tar -zxvf gperftools-2.10.tar.gz</span><br></pre></td></tr></table></figure><p>编译并安装，默认安装在/usr/local目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> gperftools-2.10</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make instal</span><br></pre></td></tr></table></figure><p>打开~/.bashrc文件添加环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>将目录/usr/local/bin和/usr/local/lib添加进环境变量，在文件末尾追加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/local/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> PPROF_PATH=/usr/local/bin</span><br><span class="line"><span class="built_in">export</span> LD_LIBRAR_PATH=/usr/local/lib:<span class="variable">$LD_LIBRAR_PATH</span></span><br></pre></td></tr></table></figure><p>使~/.bashrc文件立即生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h2 id="使用gperftools"><a href="#使用gperftools" class="headerlink" title="使用gperftools"></a>使用gperftools</h2><h3 id="TCMalloc"><a href="#TCMalloc" class="headerlink" title="TCMalloc"></a>TCMalloc</h3><ul><li><p>简介</p><p>tcmalloc全称Thread-Caching Malloc，即线程缓存的malloc，<em>实现了高效的多线程内存管理</em>，对 C 的 malloc() 和 C++ 的 operator new 自定义了实现，用于替代系统的内存分配相关的函数（malloc、free，new，new[]等）。</p><p>TCMalloc (google-perftools) 是<strong>用于优化C++写的多线程应用</strong>，比glibc 2.3的malloc快。</p></li><li><p>使用方法</p><p>方法1：编译源文件时链接-ltcmalloc 库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc/g++ [source_file] -g -o [exe_file] -ltcmalloc</span><br><span class="line">./[exe_file]</span><br></pre></td></tr></table></figure><p>方法2：在运行别人编译好的程序时，可以通过设置环境变量使用tcmalloc(不推荐)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LD_PRELOAD=/usr/local/lib/libtcmalloc.so</span><br><span class="line">./[exe_file]</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LD_PRELOAD=/usr/local/lib/libtcmalloc.so ./[exe_file]</span><br></pre></td></tr></table></figure></li><li><p>更多信息请见<a href="https://gperftools.github.io/gperftools/tcmalloc.html">官方文档</a></p></li></ul><h3 id="Heap-Checker"><a href="#Heap-Checker" class="headerlink" title="Heap_Checker"></a>Heap_Checker</h3><ul><li><p>简介</p><p><strong>用来检测 C++ 程序中内存泄漏</strong>的堆检查器，检测进程整个生命周期的内存泄露。</p><p>heap_checker的检测方式有4种，按检测的严格程度依次为：minimal，normal，strict，draconian ，normal模式适用于大多数内存泄露检查。</p><p>使用它有三个步骤：将库链接到程序、运行代码和分析输出。</p></li><li><p>使用方法（不包括分析输出）</p><p>方法1：</p><p>编译源文件时链接-ltcmalloc 库,加上<code>-g</code>选项可以定位内存泄漏的行数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc/g++ [source_file] -g -o [exe_file] -ltcmalloc</span><br></pre></td></tr></table></figure><p>设置环境变量并运行程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HEAPCHECK=normal </span><br><span class="line">./[exe_file]</span><br></pre></td></tr></table></figure><p>也可以写在一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">env</span> HEAPCHECK=normal ./[exe_file]</span><br></pre></td></tr></table></figure><p>方法2：在运行别人编译好的程序时，可以通过设置环境变量使用tcmalloc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LD_PRELOAD=<span class="string">&quot;/usr/local/lib/libtcmalloc.so&quot;</span> <span class="built_in">env</span> HEAPCHECK=normal ./[exe_file]</span><br></pre></td></tr></table></figure></li><li><p>使用示例</p><p>leak.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> *s = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">5</span> * <span class="number">1024</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> *n = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">2</span>*<span class="number">1024</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test1</span>();</span><br><span class="line">  <span class="built_in">test2</span>();</span><br><span class="line">  <span class="type">char</span> *s = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">5</span> * <span class="number">1024</span>];</span><br><span class="line">  <span class="type">int</span> *n = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">2</span>*<span class="number">1024</span>];</span><br><span class="line">  <span class="built_in">sleep</span>(<span class="number">3</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用heap_checker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g++ leak.cpp -g -o leak -ltcmalloc</span><br><span class="line"><span class="built_in">env</span>  HEAPCHECK=normal ./leak</span><br></pre></td></tr></table></figure><p>输出</p><p><img src="/images/leak输出.png" alt=""></p><p>绿框中的输出表示，leak.cpp有4处内存泄露：分别泄露8192bytes、8192bytes、5120bytes和5120bytes</p><p>另外，heap_checker提示我们可以执行红框中的语句实现可视化分析</p><p>通过pprof工具进行可视化分析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pprof ./leak <span class="string">&quot;/tmp/leak.10448._main_-end.heap&quot;</span> --inuse_objects --lines --heapcheck  --edgefraction=1e-10 --nodefraction=1e-10 --gv</span><br></pre></td></tr></table></figure><p><img src="/images/gv.png" alt=""></p><p>每个灰色方框表示一处内存泄露，方框包含<em>函数名称</em>、<em>cpp文件位置</em>和<em>内存泄漏发生在cpp文件中的具体行数</em>。指向它们的白色方框中包含的是调用发生内存泄漏的函数的上一级函数信息，也包含<em>函数名称</em>、<em>cpp文件位置</em>和<em>调用发生在cpp文件中的具体行数</em>。</p><p>由可视化结果可知，发生四处内存泄露：</p><pre><code>第一处内存泄漏在leak.cpp的第7行，函数名为test1，这个函数被leak.cpp中的main函数调用，调用发生在leak.cpp的第17行第二处内存泄漏在leak.cpp的第19行，函数名为main第三处内存泄漏在leak.cpp的第25行，函数名为main第四处内存泄漏在leak.cpp的第12行，函数名为test2，这个函数被leak.cpp中的main函数调用，调用发生在leak.cpp的第18行</code></pre><p>除此之外，可以选择以其他方式查看结果(只需将<code>--gv</code>改为以下选项)</p><p><code>--text</code>  &nbsp;&nbsp;&nbsp;&nbsp;生成文字报告 </p><p><code>--stack</code> &nbsp;&nbsp;&nbsp;&nbsp;生成堆栈跟踪 </p><p><code>--web</code>   &nbsp;&nbsp;&nbsp;&nbsp;以网页的形式展示 </p><p><code>--pdf</code>   &nbsp;&nbsp;&nbsp;&nbsp;生成pdf到标准输出 （较快，推荐）<code>--pdf &gt; xxx.pdf</code></p><p>…</p><p>更多查看结果的方式请使用 <code>pprof --help</code> 命令查阅</p><p>例如：以text形式查看分析结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pprof ./leak <span class="string">&quot;/tmp/leak.10448._main_-end.heap&quot;</span> --inuse_objects --lines --heapcheck  --edgefraction=1e-10 --nodefraction=1e-10 --text</span><br></pre></td></tr></table></figure><p><img src="/images/text.png" alt=""></p><p>以pdf形似查看分析结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pprof ./leak <span class="string">&quot;/tmp/leak.10448._main_-end.heap&quot;</span> --inuse_objects --lines --heapcheck  --edgefraction=1e-10 --nodefraction=1e-10 --pdf &gt; leak.pdf</span><br></pre></td></tr></table></figure><p>leak.pdf与gv显示的结果一样</p></li><li><p>部分调优参数</p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">默认值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>HEAP_CHECK_MAX_LEAKS</code></td><td style="text-align:center">20</td><td style="text-align:center">能打印到 stderr 的最大泄漏数（所有泄漏仍会在 pprof 可视化的时候显示）。 如果为负数或零，则打印所有发现的泄漏</td></tr><tr><td style="text-align:center"><code>HEAP_CHECK_TEST_POINTER_ALIGNMENT</code></td><td style="text-align:center">false</td><td style="text-align:center">如果为真，检查泄漏是否可能是由于使用了未对齐的指针造成的</td></tr><tr><td style="text-align:center"><code>HEAP_CHECK_POINTER_SOURCE_ALIGNMENT</code></td><td style="text-align:center">sizeof(void*)</td><td style="text-align:center">内存中所有指针应该位于的对齐方式。如果任何对齐都可以，请使用 1</td></tr><tr><td style="text-align:center"><code>HEAP_CHECK_DUMP_DIRECTORY</code></td><td style="text-align:center">/tmp</td><td style="text-align:center">内存检测文件的生成位置</td></tr></tbody></table></div><ul><li>更多信息请见<a href="https://gperftools.github.io/gperftools/heap_checker.html">官方文档</a></li></ul><h3 id="Heap-Profile"><a href="#Heap-Profile" class="headerlink" title="Heap_Profile"></a>Heap_Profile</h3><ul><li><p>简介</p><p>heap_profile监控程序运行过程中的内存使用情况，会在程序运行时不断生成.heap文件，记录某时刻程序所使用的内存大小和详细信息。</p><p><strong>用来分析程序运行中的内存消耗瓶颈</strong>，也可以通过比较不同时刻的内存使用量来定位内存泄露。</p><p>使用它有三个步骤：将库链接到程序、运行代码和分析输出。</p></li><li><p>使用方法</p><ul><li><p>链接及运行部分（最终会生成.heap文件）</p><p>方法1：</p><p>编译源文件时链接-ltcmalloc 库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc/g++ [source_file]  -o [exe_file] -ltcmalloc</span><br></pre></td></tr></table></figure><p>设置环境变量并运行程序 (xxx为生成.heap文件的文件名，自定义)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HEAPPROFILE=xxx.hprof</span><br><span class="line">./[exe_file]</span><br></pre></td></tr></table></figure><p>也可以写在一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">env</span> HEAPPROFILE=xxx.hprof ./[exe_file]</span><br></pre></td></tr></table></figure><p>方法2：在运行别人编译好的程序时，可以通过设置环境变量使用tcmalloc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LD_PRELOAD=<span class="string">&quot;/usr/local/lib/libtcmalloc.so&quot;</span> <span class="built_in">env</span> HEAPPROFILE=xxx.hprof ./[exe_file]</span><br></pre></td></tr></table></figure></li><li><p>分析输出</p><p>单独分析一个.heap文件(可以选择gv,pdf,text或其他形式显示分析结果)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pprof [exe_file] [heap_file] --gv / --pdf &gt; xxx.pdf / --text / ... </span><br></pre></td></tr></table></figure><p>将两个.heap文件进行比较：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pprof --base=[heap_file1] [exe_file] [heap_file2] </span><br></pre></td></tr></table></figure></li></ul></li><li><p>代码插桩</p><p>加入头文件，并使用<code>HeapProfilerStart(&quot;xxx&quot;)</code>,<code>HeapProfilerStop()</code>可以指定要监督的代码段，本例中heap_profile只会检测代码段2的内存使用情况，并生成xxx.*.heap文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gperftools/heap-profiler.h&gt;</span></span></span><br><span class="line"><span class="comment">//代码段1</span></span><br><span class="line"><span class="built_in">HeapProfilerStart</span>(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"><span class="comment">//代码段2</span></span><br><span class="line"><span class="built_in">HeapProfilerStop</span>();</span><br><span class="line"><span class="comment">//代码段3</span></span><br></pre></td></tr></table></figure><p>编译并运行程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc/g++ [source_file]  -o [exe_file] -ltcmalloc</span><br><span class="line">./[exe_file]</span><br></pre></td></tr></table></figure><p>分析输出部分与上文所述相同</p></li><li><p>使用示例</p><p>以treeline为例，在treeline/scripts/ycsb_v2/run.sh中将</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../../build/bench/run_custom \</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LD_PRELOAD=<span class="string">&quot;/usr/local/lib/libtcmalloc.so&quot;</span> <span class="built_in">env</span> HEAPPROFILE=amzn_64B_a_heapprofile.hprof  ../../build/bench/run_custom \</span><br></pre></td></tr></table></figure><p>并在COND文件中修改实验配置：工作负载为A、记录大小为64B，线程数为16</p><p>在treeline目录下，运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cond run //scripts/ycsb_v2:amzn</span><br></pre></td></tr></table></figure><blockquote><p>单独分析一个.heap文件</p></blockquote><p>程序运行过程中，生成了11个.heap文件，分别记录了在运行过程中的十一个时刻的内存使用情况，将其移动到treeline/scripts/ycsb_v2/heapprofile文件夹下</p><p><img src="/images/heap.png" alt=""></p><p>以pdf的形式分析第十个生成文件amzn_64B_a_heapprofile.hprof.0010.heap</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pprof build/bench/run_custom scripts/ycsb_v2/heapprofile/amzn_64B_a_heapprofile.hprof.0011.heap --pdf &gt;amzn_64B_a_heapprofile.hprof.0010.heap.pdf</span><br></pre></td></tr></table></figure><p>生成amzn_64B_a_heapprofile.hprof.0010.heap.pdf文件在treeline/下，可以看到内存消耗较多的函数为<code>LoadDatasetFromTextFile</code>,<code>ExtractDirty</code>,<code>Put</code>,<code>_M_default_append</code>，优化程序使用内存时可以重点关注这几个函数</p><p><img src="/images/heap10.png" alt=""></p><p>左上角显示元信息：</p><p>可执行程序的名称为run_custom，在生成amzn_64B_a_heapprofile.hprof.0010.heap文件的这一时刻，程序总共使用了1773.9MB内存，被关注的函数所占内存为1773.9MB（没有使用<code>--foucs</code>关注特定函数则默认全部关注），此外，一些不重要的节点和边被丢弃以减少混乱。</p><p><img src="/images/heap10左上.png" alt=""></p><p>有向图所含信息：</p><p>图中的每个方框代表一个函数，有向边表示调用关系，有向边旁边的数字代表被其直接和间接调用的函数所使用的所有内存，方框中的信息从上到下依次是：</p><pre><code>Class NameMethod Namelocal (percentage)  //此函数本身所使用的内存大小（及其占比）of cumulative (percentage)  //此函数本身和其直接及间接调用的所有函数所使用的内存大小（及其占比）</code></pre><p>以下面的amzn_64B_a_heapprofile.hprof.0010.heap.pdf的局部有向图为例：</p><p><code>Manager</code>函数自身使用15.8MB内存，占比为0.9%，此函数本身和其直接及间接调用的所有函数所使用的内存大小为23.8MB，占比为1.3%，其调用的函数所使用的内存为23.8MB-15.8MB=8.0MB；</p><p><code>RecordCache</code>函数自身使用0MB内存，占比为0.0%，此函数本身和其直接及间接调用的所有函数所使用的内存大小为687.8MB，占比为38.8%，其调用的函数所使用的内存为687.8MB-0MB=687.8MB；</p><p>这两个函数都调用了<code>_M_default_append</code>函数，将两个有向边上的数字相加，得到<code>_M_default_append</code>函数使用8.0MB+685.8MB=693.8MB内存，占比为39.1%；</p><p><img src="/images/heap10详细.png" alt=""></p><blockquote><p>将两个.heap文件相比较</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pprof --base=scripts/ycsb_v2/heapprofile/amzn_64B_a_heapprofile.hprof.0011.heap build/bench/run_custom scripts/ycsb_v2/heapprofile/amzn_64B_a_heapprofile.hprof.0010.heap </span><br></pre></td></tr></table></figure><p>此时会进入交互窗口，输入top20，显示前20个内存大小变化最大的函数</p><p>记生成amzn_64B_a_heapprofile.hprof.0010.heap的时刻为t10，生成amzn_64B_a_heapprofile.hprof.0011.heap的时刻为t11，程序在t10比在t11多使用1613.7MB内存</p><p>函数<code>_M_default_append</code>在t10比在t11多使用693.8MB内存，占1613.7MB的43%</p><p>函数<code>Put</code>在t10比在t11多使用299.6MB内存，占1613.7MB的18.6%</p><p>……</p><p><img src="/images/比较.png" alt=""></p><p>可在交互窗口输入<code>help</code>查看更多信息</p></li><li><p>更多信息请见<a href="https://gperftools.github.io/gperftools/heapprofile.html">官方文档</a></p></li></ul><h3 id="CPU-Profile"><a href="#CPU-Profile" class="headerlink" title="CPU_Profile"></a>CPU_Profile</h3><ul><li><p>简介</p><p>cpu_profile记录程序执行过程中各函数的cpu消耗时间，并生成函数调用图，<strong>用来定位热点函数</strong>。</p><p>使用它有三个步骤：将库链接到程序、运行代码和分析输出。</p></li><li><p>使用方法</p><ul><li><p>链接及运行部分（最终会生成.prof文件）</p><p>方法1：</p><p>编译源文件时链接-lprofiler 库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc/g++ [source_file]  -o [exe_file] -lprofiler</span><br></pre></td></tr></table></figure><p>设置环境变量并运行程序 (xxx为生成.prof文件的文件名，自定义)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CPUPROFILE=xxx.prof</span><br><span class="line">./[exe_file]</span><br></pre></td></tr></table></figure><p>也可以写在一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">env</span> CPUPROFILE=xxx.prof ./[exe_file]</span><br></pre></td></tr></table></figure><p>方法2：在运行别人编译好的程序时，可以通过设置环境变量使用cpu_profile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LD_PRELOAD=<span class="string">&quot;/usr/local/lib/libprofiler.so&quot;</span> <span class="built_in">env</span> CPUPROFILE=xxx.prof ./[exe_file]</span><br></pre></td></tr></table></figure></li><li><p>分析输出</p><p>分析生成的.prof文件(可以选择gv,pdf,text或其他形式显示分析结果)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pprof [exe_file] [prof_file] --gv / --pdf &gt; xxx.pdf / --text / ... </span><br></pre></td></tr></table></figure></li></ul></li><li><p>代码插桩</p><p>加入头文件，并使用<code>ProfilerStart(&quot;xxx.prof&quot;)</code>,<code>ProfilerStop()</code>可以指定要监督的代码段，本例中cpu_profile只会检测代码段2的cpu消耗时间，并生成xxx.prof</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gperftools/profiler.h&gt;</span></span></span><br><span class="line"><span class="comment">//代码段1</span></span><br><span class="line"><span class="built_in">ProfilerStart</span>(<span class="string">&quot;xxx.prof&quot;</span>);</span><br><span class="line"><span class="comment">//代码段2</span></span><br><span class="line"><span class="built_in">ProfilerStop</span>();</span><br><span class="line"><span class="comment">//代码段3</span></span><br></pre></td></tr></table></figure><p>编译并运行程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc/g++ [source_file]  -o [exe_file] -lprofiler</span><br><span class="line">./[exe_file]</span><br></pre></td></tr></table></figure><p>分析输出部分与上文所述相同同</p></li><li><p>使用示例</p><p>以treeline为例，在treeline/scripts/ycsb_v2/run.sh中将</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../../build/bench/run_custom \</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LD_PRELOAD=<span class="string">&quot;/usr/local/lib/libprofiler.so&quot;</span> <span class="built_in">env</span> CPUPROFILE=amzn_64B_a_16_cpu.prof  ../../build/bench/run_custom \</span><br></pre></td></tr></table></figure><p>并在COND文件中修改实验配置：工作负载为A、记录大小为64B，线程数为16</p><p>在treeline目录下，运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cond run //scripts/ycsb_v2:amzn</span><br></pre></td></tr></table></figure><p>程序运行结束后，会生成amzn_64B_a_16_cpu.prof文件，记录了在运行过程中个函数的cpu消耗时间和调用关系，将其移动到treeline/scripts/ycsb_v2/cpuprofile文件夹下</p><p>以pdf的形式生成结果分析报告</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pprof build/bench/run_custom scripts/ycsb_v2/cpuprofile/amzn_64B_a_16_cpu.prof --pdf &gt;amzn_64B_a_16_cpu.pdf</span><br></pre></td></tr></table></figure><p>生成amzn_64B_a_16_cpu.pdf文件在treeline/下，可以看到cpu消耗时间较长的函数为<code>GetCacheIndex</code>,<code>__pread_nocancel</code>,<code>__pwrite_nocancel</code>等，说明这几个函数为热点函数，优化程序时可以重点关注这几个函数</p><p><img src="/images/cpu.png" alt=""></p><p>顶部显示元信息：</p><p>可执行程序的名称为run_custom，默认每1s采样100次，共采样18128，说明程序执行了181.28s。采样到的被关注的函数次数为18128（没有使用<code>--foucs</code>关注特定函数则默认全部关注），此外，一些不重要的节点和边被丢弃以减少混乱。</p><p><img src="/images/cpu顶部.png" alt=""></p><p>有向图所含信息：</p><p>图中的每个方框代表一个函数，有向边表示调用关系，有向边旁边的数字代表采样到的被其直接和间接调用的函数的次数，方框中的信息从上到下依次是：</p><pre><code>Class NameMethod Namelocal (percentage)  //此函数本身被采样到的次数（及其占比）of cumulative (percentage)  //此函数本身和其直接及间接调用的所有函数被采样到的次数（及其占比）</code></pre><p>以下面的amzn_64B_a_16_cpu.pdf的局部有向图为例：</p><p>main函数自身消耗0s，占比为0.0%，此函数本身和其直接及间接调用的所有函数所消耗的时间为13.12s，占比为7.2%，其调用的函数所消耗的时间为13.12s-0s=13.12s；</p><p>main函数直接调用了三个函数，分别为<code>LoadDatasetFromTextFile</code>,<code>LoadFrom</code>,<code>SetCustomLoadDataset</code>；</p><p><code>LoadDatasetFromTextFile</code>函数消耗2.15s，占比为1.2%，此函数本身和其直接及间接调用的所有函数所消耗的时间为70.2s，占比为3.9%，其调用的函数所消耗的时间为7.02s-2.15s=4.87s；</p><p><img src="/images/cpu局部.png" alt=""></p></li><li><p>更多信息请见<a href="https://gperftools.github.io/gperftools/cpuprofile.html">官方文档</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;gperftools是Google开源的一款包含多线程下高性能内存分配器&lt;code&gt;tcmalloc&lt;/code&gt;和其他性能分析工具的集合。共分为四个部分，TCmalloc：一个优化的内存管理算法；Heap_Check：检测程序运行过程中是否发生内存泄漏的工具；Heap_P</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>TreeLine的编译及运行</title>
    <link href="http://example.com/2023/08/19/TreeLine%E7%9A%84%E7%BC%96%E8%AF%91%E5%8F%8A%E8%BF%90%E8%A1%8C/"/>
    <id>http://example.com/2023/08/19/TreeLine%E7%9A%84%E7%BC%96%E8%AF%91%E5%8F%8A%E8%BF%90%E8%A1%8C/</id>
    <published>2023-08-19T08:50:05.000Z</published>
    <updated>2023-08-20T13:41:31.626Z</updated>
    
    <content type="html"><![CDATA[<p>随着现代存储技术的发展，对于NVMe SSDs来说，随机写的开销与顺序写的开销已经不像传统存储器那样差距明显了。基于LSM结构的KV数据库，如rocksdb、leanstore都采用顺序写，会牺牲部分读性能；而2021年被提出来的TreeLine则采用随机写，是一个原地更新的KV存储系统，并提出三个关键思想提高读写性能。</p><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><h3 id="安装Cmake"><a href="#安装Cmake" class="headerlink" title="安装Cmake"></a>安装Cmake</h3><p>要求：version &gt;= 3.17</p><p>下载源码并解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://cmake.org/files/v3.24/cmake-3.24.0.tar.gz</span><br><span class="line">tar -zxvf cmake-3.24.0.tar.gz</span><br></pre></td></tr></table></figure><p>编译并安装，- -prefix=/usr/local/cmake-3.24.0表示将cmake安装到目录/uar/local/cmake-3.24.0，可自定义目录，但要与下文中的环境变量目录相对应</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> cmake-3.24.0</span><br><span class="line">./bootstrap --prefix=/usr/local/cmake-3.24.0 </span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>打开~/.bashrc文件添加环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>将目录/usr/local/cmake-3.24.0/bin添加进环境变量，在文件末尾追加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/local/cmake-3.24.0/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>使~/.bashrc文件立即生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="安装gcc-g"><a href="#安装gcc-g" class="headerlink" title="安装gcc/g++"></a>安装gcc/g++</h3><p>要求：必须支持C++17</p><p>下载源码并解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirror.tuna.tsinghua.edu.cn/gnu/gcc/gcc-11.4.0/gcc-11.4.0.tar.gz</span><br><span class="line">tar -zxvf gcc-11.4.0.tar.gz</span><br></pre></td></tr></table></figure><p>下载所需依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> gcc-11.4.0</span><br><span class="line">./contrib/download_prerequisites</span><br></pre></td></tr></table></figure><p>编译并安装,将gcc/g++安装到/usr/local/gcc-11.4.0下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/gcc-11.4.0  --enable-bootstrap --enable-languages=c,c++ --enable-checking=release --disable-multilib</span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>打开~/.bashrc文件添加环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>添加进环境变量，在文件末尾追加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/local/gcc-11.4.0/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/local/gcc-11.4.0/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/local/gcc-11.4.0/lib64:<span class="variable">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure><p>使~/.bashrc文件立即生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h3><p>要求：version &gt;= 3.8</p><p>下载所需工具和库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install build-essential libssl-dev zlib1g-dev libncurses5-dev libncursesw5-dev libreadline-dev libsqlite3-dev libgdbm-dev libdb5.3-dev libbz2-dev libexpat1-dev liblzma-dev tk-dev libffi-dev</span><br></pre></td></tr></table></figure><p>下载源码并解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.8.16/Python-3.8.16.tgz</span><br><span class="line">tar -xf Python-3.8.16.tgz</span><br></pre></td></tr></table></figure><p>编译并安装，安装到/usr/local/python-3.8.16目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Python-3.8.16</span><br><span class="line">./configure --prefix=/usr/local/python-3.8.16 --enable-optimizations </span><br><span class="line">make </span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>打开~/.bashrc文件添加环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>将目录/usr/local/python-3.8.16/bin添加进环境变量，在文件末尾追加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/local/python-3.8.16/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>使~/.bashrc文件立即生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="下载其他所需依赖"><a href="#下载其他所需依赖" class="headerlink" title="下载其他所需依赖"></a>下载其他所需依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libtbb-dev autoconf libjemalloc-dev</span><br></pre></td></tr></table></figure><p>若无法使用此方法安装libtbb-dev和libjemalloc-dev，也可以选择下载源码并编译安装，参考下文中的“安装tbb库”和“安装jemalloc库”</p><h3 id="安装tbb库"><a href="#安装tbb库" class="headerlink" title="安装tbb库"></a>安装tbb库</h3><p>下载源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/oneapi-src/oneTBB.git</span><br></pre></td></tr></table></figure><p>编译并安装，安装目录为/tmp/my_installed_onetbb </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> oneTBB</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/tmp/my_installed_onetbb -DTBB_TEST=OFF ..</span><br><span class="line">cmake --build .</span><br><span class="line">cmake --install .</span><br></pre></td></tr></table></figure><p>将所需头文件及依赖复制到/usr/local/gcc-11.4.0/include/c++/11.4.0/和/usr/local/gcc-11.4.0/lib64/下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tem/my_installed_onetbb</span><br><span class="line">sudo <span class="built_in">cp</span> -r include/tbb  /usr/local/gcc-11.4.0/include/c++/11.4.0/  //复制头文件</span><br><span class="line"><span class="built_in">cd</span> lib64</span><br><span class="line">sudo <span class="built_in">cp</span> *.so *.2 *.11 *.12 /usr/local/gcc-11.4.0/lib64/  //复制依赖</span><br></pre></td></tr></table></figure><h3 id="安装jemalloc库"><a href="#安装jemalloc库" class="headerlink" title="安装jemalloc库"></a>安装jemalloc库</h3><p>下载源码并解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/jemalloc/jemalloc/archive/5.2.1.tar.gz</span><br><span class="line">tar -zxvf 5.2.1.tar.gz</span><br></pre></td></tr></table></figure><p>编译并安装，安装目录默认为/usr/local</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> jemalloc-5.2.1</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure --with-version=<span class="string">&quot;5.2.1-0-g0&quot;</span>  </span><br><span class="line">make dist </span><br><span class="line">make </span><br><span class="line">sudo make install </span><br></pre></td></tr></table></figure><p>打开~/.bashrc文件添加环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>将目录/usr/local/bin和/usr/local/lib添加进环境变量，在文件末尾追加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/local/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRAR_PATH=/usr/local/lib:<span class="variable">$LD_LIBRAR_PATH</span></span><br></pre></td></tr></table></figure><p>使~/.bashrc文件立即生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h2 id="下载TreeLine源码"><a href="#下载TreeLine源码" class="headerlink" title="下载TreeLine源码"></a>下载TreeLine源码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/mitdbg/treeline.git</span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>创建build文件夹存放编译后的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br></pre></td></tr></table></figure><p>执行编译（不包括treeline/tests/和treeline/benchmarks/目录下的文件）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -DCMAKE_BUILD_TYPE=Release .. &amp;&amp; make -j</span><br></pre></td></tr></table></figure><p>若也要编译treeline/tests/下的文件，则编译命令可换为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -DCMAKE_BUILD_TYPE=Release -DTL_BUILD_TESTS=ON .. &amp;&amp; make -j</span><br></pre></td></tr></table></figure><p>同样地，若也要编译treeline/benchmarks/下的文件，则编译命令可换为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -DCMAKE_BUILD_TYPE=Release -DTL_BUILD_BENCHMARKS=ON .. &amp;&amp; make -j</span><br></pre></td></tr></table></figure><p>也可将treeline/下的文件全部编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -DCMAKE_BUILD_TYPE=Release -DTL_BUILD_TESTS=ON -DTL_BUILD_BENCHMARKS=ON .. &amp;&amp; make -j</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><h3 id="下载cond"><a href="#下载cond" class="headerlink" title="下载cond"></a>下载cond</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install python3-pip  //先下载pip</span><br><span class="line">pip install conductor-cli</span><br></pre></td></tr></table></figure><p>命令行输入<code>cond</code>，若显示Command cond not found，打开~/.bashrc文件添加环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>将cond所在目录/home/xxx/.local/bin添加进环境变量，在文件末尾追加（xxx为用户名）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/home/xxx/.local/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>使~/.bashrc文件立即生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="设置checkpoint存储路径"><a href="#设置checkpoint存储路径" class="headerlink" title="设置checkpoint存储路径"></a>设置checkpoint存储路径</h3><p>在treeline/scripts/下创建experiment_config.sh文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> treeline/scripts</span><br><span class="line"><span class="built_in">touch</span> experiment_config.sh</span><br></pre></td></tr></table></figure><p>将treeline/scripts/experiment_config_example.sh的内容复制给experiment_config.sh</p><p>修改experiment_config.sh文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#存储checkpoint的路径</span></span><br><span class="line">DB_CHECKPOINT_PATH = xxxx/llsm-checkpoint</span><br><span class="line"><span class="comment">#加载checkpoint的路径</span></span><br><span class="line">DB_PATH = xxxx/llsm</span><br><span class="line"><span class="comment">#自定义数据集存储路径</span></span><br><span class="line">TP_DATASET_PATH = xxxx/datasets</span><br></pre></td></tr></table></figure><h3 id="修改实验配置"><a href="#修改实验配置" class="headerlink" title="修改实验配置"></a>修改实验配置</h3><p>实验配置写在treeline/scripts/ycsb_v2/COND中</p><p>可以通过修改此COND文件中的WORKLOADS，DBS，DISTRIBUTIONS，THREADS，CONFIGS等来修改运行的工作负载类型、数据库、数据分布类型、线程数、记录大小等</p><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">WORKLOADS = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,]  </span><br><span class="line">DBS = [</span><br><span class="line">  <span class="string">&quot;leanstore&quot;</span>,</span><br><span class="line">  <span class="string">&quot;pg_llsm&quot;</span>,</span><br><span class="line">  <span class="string">&quot;rocksdb&quot;</span></span><br><span class="line">]</span><br><span class="line">DISTRIBUTIONS = [<span class="string">&quot;zipfian&quot;</span>]</span><br><span class="line">THREADS = [1, 2, 4, 8, 16]</span><br><span class="line">CONFIGS = [CONFIG_64B]</span><br></pre></td></tr></table></figure><p>表示只运行工作负载A和B类型，在所示三个数据库上进行测试，数据分布类型为zipfian，并分别使用1，2，4，8，16线程跑五次，一个记录大小为64B</p><p>实验配置修改完成后，通过替换下文“测试benchmark”中的command，可实现特定的任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> = synth   //在合成数据集上测试</span><br><span class="line"><span class="built_in">command</span> = amzn    //在amzn数据集上测试</span><br><span class="line"><span class="built_in">command</span> = osm     //在osm数据集上测试</span><br></pre></td></tr></table></figure><p>更多“command”可取值详见COND文件</p><h3 id="运行benchmark"><a href="#运行benchmark" class="headerlink" title="运行benchmark"></a>运行benchmark</h3><p>使用cond命令运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> treeline</span><br><span class="line">cond run //scripts/ycsb_v2: <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>结果保存在treeline/cond-out/下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;随着现代存储技术的发展，对于NVMe SSDs来说，随机写的开销与顺序写的开销已经不像传统存储器那样差距明显了。基于LSM结构的KV数据库，如rocksdb、leanstore都采用顺序写，会牺牲部分读性能；而2021年被提出来的TreeLine则采用随机写，是一个原地更新</summary>
      
    
    
    
    
  </entry>
  
</feed>
