<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-08-19T09:23:32.282Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于TreeLine的编译及运行</title>
    <link href="http://example.com/2023/08/19/%E5%85%B3%E4%BA%8ETreeLine%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/"/>
    <id>http://example.com/2023/08/19/%E5%85%B3%E4%BA%8ETreeLine%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/</id>
    <published>2023-08-19T08:50:05.000Z</published>
    <updated>2023-08-19T09:23:32.282Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><h3 id="安装Cmake"><a href="#安装Cmake" class="headerlink" title="安装Cmake"></a>安装Cmake</h3><p>version &gt;= 3.17</p><p>下载源码并解压<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://cmake.org/files/v3.24/cmake-3.24.0.tar.gz</span><br><span class="line">tar -zxvf cmake-3.24.0.tar.gz</span><br></pre></td></tr></table></figure><br>编译并安装，- -prefix=/usr/local/cmake-3.24.0表示将cmake安装到目录/uar/local/cmake-3.24.0，可自定义目录，但要与下文中的环境变量目录相对应<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> cmake-3.24.0</span><br><span class="line">./bootstrap --prefix=/usr/local/cmake-3.24.0 </span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><br>打开~/.bashrc文件添加环境变量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><br>将目录/usr/local/cmake-3.24.0/bin添加进环境变量，在文件末尾追加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/local/cmake-3.24.0/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><br>使~/.bashrc文件即刻生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p><h3 id="安装gcc-g"><a href="#安装gcc-g" class="headerlink" title="安装gcc/g++"></a>安装gcc/g++</h3><p>必须支持C++17</p><p>下载源码并解压<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirror.tuna.tsinghua.edu.cn/gnu/gcc/gcc-11.4.0/gcc-11.4.0.tar.gz</span><br><span class="line">tar -zxvf gcc-11.4.0.tar.gz</span><br></pre></td></tr></table></figure><br>下载所需依赖<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> gcc-11.4.0</span><br><span class="line">./contrib/download_prerequisites</span><br></pre></td></tr></table></figure><br>编译并安装,将gcc/g++安装到/usr/local/gcc-11.4.0下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/gcc-11.4.0  --enable-bootstrap --enable-languages=c,c++ --enable-checking=release --disable-multilib</span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><br>打开~/.bashrc文件添加环境变量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><br>添加进环境变量，在文件末尾追加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/local/gcc-11.4.0/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/local/gcc-11.4.0/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/local/gcc-11.4.0/lib64:<span class="variable">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure><br>使~/.bashrc文件即刻生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p><h3 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h3><p>version &gt;= 3.8</p><p>下载所需工具和库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install build-essential libssl-dev zlib1g-dev libncurses5-dev libncursesw5-dev libreadline-dev libsqlite3-dev libgdbm-dev libdb5.3-dev libbz2-dev libexpat1-dev liblzma-dev tk-dev libffi-dev</span><br></pre></td></tr></table></figure><br>下载源码并解压<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.8.16/Python-3.8.16.tgz</span><br><span class="line">tar -xf Python-3.8.16.tgz</span><br></pre></td></tr></table></figure><br>编译并安装，安装到/usr/local/python-3.8.16目录下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Python-3.8.16</span><br><span class="line">./configure --prefix=/usr/local/python-3.8.16 --enable-optimizations </span><br><span class="line">make </span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><br>打开~/.bashrc文件添加环境变量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><br>将目录/usr/local/python-3.8.16/bin添加进环境变量，在文件末尾追加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/local/python-3.8.16/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><br>使~/.bashrc文件即刻生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p><h3 id="下载其他所需依赖"><a href="#下载其他所需依赖" class="headerlink" title="下载其他所需依赖"></a>下载其他所需依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libtbb-dev autoconf libjemalloc-dev</span><br></pre></td></tr></table></figure><p>若无法使用此方法安装libtbb-dev和libjemalloc-dev，也可以选择下载源码并编译安装，参考下文中的“安装tbb库”和“安装jemalloc库”</p><h3 id="安装tbb库"><a href="#安装tbb库" class="headerlink" title="安装tbb库"></a>安装tbb库</h3><p>下载源码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/oneapi-src/oneTBB.git</span><br></pre></td></tr></table></figure><br>编译并安装，安装目录为/tmp/my_installed_onetbb<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> oneTBB</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/tmp/my_installed_onetbb -DTBB_TEST=OFF ..</span><br><span class="line">cmake --build .</span><br><span class="line">cmake --install .</span><br></pre></td></tr></table></figure><br>将所需头文件及依赖复制到/usr/local/gcc-11.4.0/include/c++/11.4.0/和/usr/local/gcc-11.4.0/lib64/下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tem/my_installed_onetbb</span><br><span class="line">sudo <span class="built_in">cp</span> -r include/tbb  /usr/local/gcc-11.4.0/include/c++/11.4.0/  //复制头文件</span><br><span class="line"><span class="built_in">cd</span> lib64</span><br><span class="line">sudo <span class="built_in">cp</span> *.so *.2 *.11 *.12 /usr/local/gcc-11.4.0/lib64/  //复制依赖</span><br></pre></td></tr></table></figure></p><h3 id="安装jemalloc库"><a href="#安装jemalloc库" class="headerlink" title="安装jemalloc库"></a>安装jemalloc库</h3><p>下载源码并解压<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/jemalloc/jemalloc/archive/5.2.1.tar.gz</span><br><span class="line">tar -zxvf 5.2.1.tar.gz</span><br></pre></td></tr></table></figure><br>编译并安装，安装目录默认为/usr/local<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> jemalloc-5.2.1</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure --with-version=<span class="string">&quot;5.2.1-0-g0&quot;</span>  </span><br><span class="line">make dist </span><br><span class="line">make </span><br><span class="line">sudo make install </span><br><span class="line">sudo ldconfig  </span><br></pre></td></tr></table></figure></p><h2 id="下载TreeLine源码"><a href="#下载TreeLine源码" class="headerlink" title="下载TreeLine源码"></a>下载TreeLine源码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/mitdbg/treeline.git</span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>创建build文件夹存放编译后的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br></pre></td></tr></table></figure><br>执行编译（不包括treeline/tests/和treeline/benchmarks/目录下的文件）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -DCMAKE_BUILD_TYPE=Release .. &amp;&amp; make -j</span><br></pre></td></tr></table></figure><br>若也要编译treeline/tests/下的文件，则编译命令可换为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -DCMAKE_BUILD_TYPE=Release -DTL_BUILD_TESTS=ON .. &amp;&amp; make -j</span><br></pre></td></tr></table></figure><br>同样地，若也要编译treeline/benchmarks/下的文件，则编译命令可换为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -DCMAKE_BUILD_TYPE=Release -DTL_BUILD_BENCHMARKS=ON .. &amp;&amp; make -j</span><br></pre></td></tr></table></figure><br>也可将treeline/下的文件全部编译：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -DCMAKE_BUILD_TYPE=Release -DTL_BUILD_TESTS=ON -DTL_BUILD_BENCHMARKS=ON .. &amp;&amp; make -j</span><br></pre></td></tr></table></figure></p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><h3 id="下载cond"><a href="#下载cond" class="headerlink" title="下载cond"></a>下载cond</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install python3-pip  //先下载pip</span><br><span class="line">pip install conductor-cli</span><br></pre></td></tr></table></figure><p>命令行输入cond，若’cond’ was not found，打开~/.bashrc文件添加环境变量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><br>将cond所在目录/home/xxx/.local/bin添加进环境变量，在文件末尾追加（xxx为用户名）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/home/xxx/.local/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><br>使~/.bashrc文件即刻生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p><h3 id="设置checkpoint存储路径"><a href="#设置checkpoint存储路径" class="headerlink" title="设置checkpoint存储路径"></a>设置checkpoint存储路径</h3><p>在treeline/scripts/下创建experiment_config.sh文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> treeline/scripts</span><br><span class="line"><span class="built_in">touch</span> experiment_config.sh</span><br></pre></td></tr></table></figure><br>将treeline/scripts/experiment_config_example.sh的内容复制给experiment_config.sh</p><p>修改experiment_config.sh文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#存储checkpoint的路径</span></span><br><span class="line">DB_CHECKPOINT_PATH=xxxx/llsm-checkpoint</span><br><span class="line"><span class="comment">#加载checkpoint的路径</span></span><br><span class="line">DB_PATH=xxxx/llsm</span><br><span class="line"><span class="comment">#自定义数据集存储路径</span></span><br><span class="line">TP_DATASET_PATH=xxxx/datasets</span><br></pre></td></tr></table></figure></p><h3 id="修改实验配置"><a href="#修改实验配置" class="headerlink" title="修改实验配置"></a>修改实验配置</h3><p>实验配置写在treeline/scripts/ycsb_v2/COND中</p><p>可以通过修改此COND文件中的WORKLOADS，DBS，DISTRIBUTIONS，THREADS，CONFIGS等来修改运行的工作负载类型、数据库、数据分布类型、线程数、记录大小等</p><p>例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">WORKLOADS = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,]  </span><br><span class="line">DBS = [</span><br><span class="line">  <span class="string">&quot;leanstore&quot;</span>,</span><br><span class="line">  <span class="string">&quot;pg_llsm&quot;</span>,</span><br><span class="line">  <span class="string">&quot;rocksdb&quot;</span></span><br><span class="line">]</span><br><span class="line">DISTRIBUTIONS = [<span class="string">&quot;zipfian&quot;</span>]</span><br><span class="line">THREADS = [1, 2, 4, 8, 16]</span><br><span class="line">CONFIGS = [CONFIG_64B]</span><br></pre></td></tr></table></figure><br>表示只运行工作负载A和B类型，在所示三个数据库上进行测试，数据分布类型为zipfian，并分别使用1，2，4，8，16线程跑五次，一个记录大小为64B</p><p>实验配置修改完成后，通过替换下文“测试benchmark”中的command，可实现特定的任务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> = synth   //在合成数据集上测试</span><br><span class="line"><span class="built_in">command</span> = amzn    //在amzn数据集上测试</span><br><span class="line"><span class="built_in">command</span> = osm     //在osm数据集上测试</span><br></pre></td></tr></table></figure><br>更多’command’可取值详见COND文件</p><h3 id="测试benchmark"><a href="#测试benchmark" class="headerlink" title="测试benchmark"></a>测试benchmark</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> treeline</span><br><span class="line">//使用cond命令开始运行</span><br><span class="line">cond run //scripts/ycsb_v2: <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>结果保存在treeline/cond-out/下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;准备环境&quot;&gt;&lt;a href=&quot;#准备环境&quot; class=&quot;headerlink&quot; title=&quot;准备环境&quot;&gt;&lt;/a&gt;准备环境&lt;/h2&gt;&lt;h3 id=&quot;安装Cmake&quot;&gt;&lt;a href=&quot;#安装Cmake&quot; class=&quot;headerlink&quot; title=&quot;安装C</summary>
      
    
    
    
    
  </entry>
  
</feed>
